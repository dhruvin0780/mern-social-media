{"ast":null,"code":"import { postDataAPI } from \"../../utils/fetchData\";\nimport { GLOBALTYPES } from \"./globalTypes\";\nimport valid from \"../../utils/valid\";\nexport const TYPES = {\n  AUTH: \"AUTH\"\n};\nexport const login = data => async dispatch => {\n  try {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        loading: true\n      }\n    });\n    const res = await postDataAPI(\"login\", data);\n    dispatch({\n      type: GLOBALTYPES.AUTH,\n      payload: {\n        token: res.data.access_token,\n        user: res.data.user\n      }\n    });\n    dispatch({\n      type: GLOBALTYPES.USER_TYPE,\n      payload: res.data.user.role\n    });\n    localStorage.setItem(\"firstLogin\", true);\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        success: res.data.msg\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const changePassword = ({\n  oldPassword,\n  newPassword,\n  cnfNewPassword,\n  auth\n}) => async dispatch => {\n  if (!oldPassword || oldPassword.length === 0) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: \"Please enter your old  password.\"\n      }\n    });\n  }\n\n  if (!newPassword || newPassword.length === 0) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: \"Please enter your new  password.\"\n      }\n    });\n  }\n\n  if (!cnfNewPassword || cnfNewPassword.length === 0) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: \"Please confirm your new  password.\"\n      }\n    });\n  }\n\n  if (newPassword !== cnfNewPassword) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: \"Your password does not match\"\n      }\n    });\n  }\n\n  try {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        loading: true\n      }\n    });\n    const res = await postDataAPI(\"changePassword\", {\n      oldPassword,\n      newPassword\n    }, auth.token);\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        loading: false\n      }\n    });\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        success: res.data.msg\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const adminLogin = data => async dispatch => {\n  try {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        loading: true\n      }\n    });\n    const res = await postDataAPI(\"admin_login\", data);\n    dispatch({\n      type: GLOBALTYPES.AUTH,\n      payload: {\n        token: res.data.access_token,\n        user: res.data.user\n      }\n    });\n    dispatch({\n      type: GLOBALTYPES.USER_TYPE,\n      payload: res.data.user.role\n    });\n    localStorage.setItem(\"firstLogin\", true);\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        success: res.data.msg\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const refreshToken = () => async dispatch => {\n  const firstLogin = localStorage.getItem(\"firstLogin\");\n\n  if (firstLogin) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        loading: true\n      }\n    });\n\n    try {\n      const res = await postDataAPI(\"refresh_token\");\n      dispatch({\n        type: GLOBALTYPES.AUTH,\n        payload: {\n          token: res.data.access_token,\n          user: res.data.user\n        }\n      });\n      dispatch({\n        type: GLOBALTYPES.USER_TYPE,\n        payload: res.data.user.role\n      });\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {}\n      });\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  }\n};\nexport const register = data => async dispatch => {\n  const check = valid(data);\n\n  if (check.errLength > 0) {\n    return dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: check.errMsg\n    });\n  }\n\n  try {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        loading: true\n      }\n    });\n    const res = await postDataAPI(\"register\", data);\n    dispatch({\n      type: GLOBALTYPES.AUTH,\n      payload: {\n        token: res.data.access_token,\n        user: res.data.user\n      }\n    });\n    dispatch({\n      type: GLOBALTYPES.USER_TYPE,\n      payload: res.data.user.role\n    });\n    localStorage.setItem(\"firstLogin\", true);\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        success: res.data.msg\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const registerAdmin = data => async dispatch => {\n  const check = valid(data);\n\n  if (check.errLength > 0) {\n    return dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: check.errMsg\n    });\n  }\n\n  try {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        loading: true\n      }\n    });\n    const res = await postDataAPI(\"register_admin\", data);\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        success: res.data.msg\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const logout = () => async dispatch => {\n  try {\n    localStorage.removeItem(\"firstLogin\");\n    await postDataAPI(\"logout\");\n    window.location.href = \"/\";\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};","map":{"version":3,"sources":["D:/MR_BHESANIYA/mern-social-media/client/src/redux/actions/authAction.js"],"names":["postDataAPI","GLOBALTYPES","valid","TYPES","AUTH","login","data","dispatch","type","ALERT","payload","loading","res","token","access_token","user","USER_TYPE","role","localStorage","setItem","success","msg","err","error","response","changePassword","oldPassword","newPassword","cnfNewPassword","auth","length","adminLogin","refreshToken","firstLogin","getItem","register","check","errLength","errMsg","registerAdmin","logout","removeItem","window","location","href"],"mappings":"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","sourcesContent":["import { postDataAPI } from \"../../utils/fetchData\";\nimport { GLOBALTYPES } from \"./globalTypes\";\nimport valid from \"../../utils/valid\";\n\nexport const TYPES = {\n\tAUTH: \"AUTH\",\n};\n\nexport const login = (data) => async (dispatch) => {\n\ttry {\n\t\tdispatch({ type: GLOBALTYPES.ALERT, payload: { loading: true } });\n\t\tconst res = await postDataAPI(\"login\", data);\n\n\t\tdispatch({\n\t\t\ttype: GLOBALTYPES.AUTH,\n\t\t\tpayload: { token: res.data.access_token, user: res.data.user },\n\t\t});\n\n\t\tdispatch({\n\t\t\ttype: GLOBALTYPES.USER_TYPE,\n\t\t\tpayload: res.data.user.role,\n\t\t});\n\n\t\tlocalStorage.setItem(\"firstLogin\", true);\n\t\tdispatch({ type: GLOBALTYPES.ALERT, payload: { success: res.data.msg } });\n\t} catch (err) {\n\t\tdispatch({\n\t\t\ttype: GLOBALTYPES.ALERT,\n\t\t\tpayload: { error: err.response.data.msg },\n\t\t});\n\t}\n};\n\nexport const changePassword =\n\t({ oldPassword, newPassword, cnfNewPassword, auth }) =>\n\tasync (dispatch) => {\n\t\tif (!oldPassword || oldPassword.length === 0) {\n\t\t\tdispatch({\n\t\t\t\ttype: GLOBALTYPES.ALERT,\n\t\t\t\tpayload: { error: \"Please enter your old  password.\" },\n\t\t\t});\n\t\t}\n\t\tif (!newPassword || newPassword.length === 0) {\n\t\t\tdispatch({\n\t\t\t\ttype: GLOBALTYPES.ALERT,\n\t\t\t\tpayload: { error: \"Please enter your new  password.\" },\n\t\t\t});\n\t\t}\n\t\tif (!cnfNewPassword || cnfNewPassword.length === 0) {\n\t\t\tdispatch({\n\t\t\t\ttype: GLOBALTYPES.ALERT,\n\t\t\t\tpayload: { error: \"Please confirm your new  password.\" },\n\t\t\t});\n\t\t}\n\t\tif (newPassword !== cnfNewPassword) {\n\t\t\tdispatch({\n\t\t\t\ttype: GLOBALTYPES.ALERT,\n\t\t\t\tpayload: { error: \"Your password does not match\" },\n\t\t\t});\n\t\t}\n\n\t\ttry {\n\t\t\tdispatch({ type: GLOBALTYPES.ALERT, payload: { loading: true } });\n\n\t\t\tconst res = await postDataAPI(\n\t\t\t\t\"changePassword\",\n\t\t\t\t{ oldPassword, newPassword },\n\t\t\t\tauth.token,\n\t\t\t);\n\n\t\t\tdispatch({ type: GLOBALTYPES.ALERT, payload: { loading: false } });\n\t\t\tdispatch({ type: GLOBALTYPES.ALERT, payload: { success: res.data.msg } });\n\t\t} catch (err) {\n\t\t\tdispatch({\n\t\t\t\ttype: GLOBALTYPES.ALERT,\n\t\t\t\tpayload: { error: err.response.data.msg },\n\t\t\t});\n\t\t}\n\t};\n\nexport const adminLogin = (data) => async (dispatch) => {\n\ttry {\n\t\tdispatch({ type: GLOBALTYPES.ALERT, payload: { loading: true } });\n\t\tconst res = await postDataAPI(\"admin_login\", data);\n\n\t\tdispatch({\n\t\t\ttype: GLOBALTYPES.AUTH,\n\t\t\tpayload: { token: res.data.access_token, user: res.data.user },\n\t\t});\n\n\t\tdispatch({\n\t\t\ttype: GLOBALTYPES.USER_TYPE,\n\t\t\tpayload: res.data.user.role,\n\t\t});\n\n\t\tlocalStorage.setItem(\"firstLogin\", true);\n\t\tdispatch({ type: GLOBALTYPES.ALERT, payload: { success: res.data.msg } });\n\t} catch (err) {\n\t\tdispatch({\n\t\t\ttype: GLOBALTYPES.ALERT,\n\t\t\tpayload: { error: err.response.data.msg },\n\t\t});\n\t}\n};\n\nexport const refreshToken = () => async (dispatch) => {\n\tconst firstLogin = localStorage.getItem(\"firstLogin\");\n\tif (firstLogin) {\n\t\tdispatch({ type: GLOBALTYPES.ALERT, payload: { loading: true } });\n\t\ttry {\n\t\t\tconst res = await postDataAPI(\"refresh_token\");\n\t\t\tdispatch({\n\t\t\t\ttype: GLOBALTYPES.AUTH,\n\t\t\t\tpayload: { token: res.data.access_token, user: res.data.user },\n\t\t\t});\n\n\t\t\tdispatch({\n\t\t\t\ttype: GLOBALTYPES.USER_TYPE,\n\t\t\t\tpayload: res.data.user.role,\n\t\t\t});\n\n\t\t\tdispatch({ type: GLOBALTYPES.ALERT, payload: {} });\n\t\t} catch (err) {\n\t\t\tdispatch({\n\t\t\t\ttype: GLOBALTYPES.ALERT,\n\t\t\t\tpayload: { error: err.response.data.msg },\n\t\t\t});\n\t\t}\n\t}\n};\n\nexport const register = (data) => async (dispatch) => {\n\tconst check = valid(data);\n\tif (check.errLength > 0) {\n\t\treturn dispatch({ type: GLOBALTYPES.ALERT, payload: check.errMsg });\n\t}\n\n\ttry {\n\t\tdispatch({ type: GLOBALTYPES.ALERT, payload: { loading: true } });\n\n\t\tconst res = await postDataAPI(\"register\", data);\n\n\t\tdispatch({\n\t\t\ttype: GLOBALTYPES.AUTH,\n\t\t\tpayload: { token: res.data.access_token, user: res.data.user },\n\t\t});\n\n\t\tdispatch({\n\t\t\ttype: GLOBALTYPES.USER_TYPE,\n\t\t\tpayload: res.data.user.role,\n\t\t});\n\n\t\tlocalStorage.setItem(\"firstLogin\", true);\n\t\tdispatch({ type: GLOBALTYPES.ALERT, payload: { success: res.data.msg } });\n\t} catch (err) {\n\t\tdispatch({\n\t\t\ttype: GLOBALTYPES.ALERT,\n\t\t\tpayload: { error: err.response.data.msg },\n\t\t});\n\t}\n};\n\nexport const registerAdmin = (data) => async (dispatch) => {\n\tconst check = valid(data);\n\tif (check.errLength > 0) {\n\t\treturn dispatch({ type: GLOBALTYPES.ALERT, payload: check.errMsg });\n\t}\n\n\ttry {\n\t\tdispatch({ type: GLOBALTYPES.ALERT, payload: { loading: true } });\n\n\t\tconst res = await postDataAPI(\"register_admin\", data);\n\n\t\tdispatch({ type: GLOBALTYPES.ALERT, payload: { success: res.data.msg } });\n\t} catch (err) {\n\t\tdispatch({\n\t\t\ttype: GLOBALTYPES.ALERT,\n\t\t\tpayload: { error: err.response.data.msg },\n\t\t});\n\t}\n};\n\nexport const logout = () => async (dispatch) => {\n\ttry {\n\t\tlocalStorage.removeItem(\"firstLogin\");\n\n\t\tawait postDataAPI(\"logout\");\n\t\twindow.location.href = \"/\";\n\t} catch (err) {\n\t\tdispatch({\n\t\t\ttype: GLOBALTYPES.ALERT,\n\t\t\tpayload: { error: err.response.data.msg },\n\t\t});\n\t}\n};\n"]},"metadata":{},"sourceType":"module"}