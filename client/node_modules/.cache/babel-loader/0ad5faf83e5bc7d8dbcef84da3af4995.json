{"ast":null,"code":"import { GLOBALTYPES } from \"./globalTypes\";\nimport { postDataAPI, getDataAPI, patchDataAPI, deleteDataAPI } from \"../../utils/fetchData\";\nimport { imageUpload } from \"../../utils/imageUpload\";\nimport { createNotify, removeNotify } from \"./notifyAction\";\nexport const POST_TYPES = {\n  CREATE_POST: \"CREATE_POST\",\n  LOADING_POST: \"LOADING_POST\",\n  GET_POSTS: \"GET_POSTS\",\n  UPDATE_POST: \"UPDATE_POST\",\n  GET_POST: \"GET_POST\",\n  DELETE_POST: \"DELETE_POST\",\n  REPORT_POST: \"REPORT_POST\",\n  SAVE_POST: \"SAVE_POST\"\n};\nexport const createPost = ({\n  content,\n  images,\n  auth,\n  socket\n}) => async dispatch => {\n  let media = [];\n\n  try {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        loading: true\n      }\n    });\n\n    if (images.length > 0) {\n      media = await imageUpload(images);\n    }\n\n    const res = await postDataAPI(\"posts\", {\n      content,\n      images: media\n    }, auth.token);\n    dispatch({\n      type: POST_TYPES.CREATE_POST,\n      payload: { ...res.data.newPost,\n        user: auth.user\n      }\n    });\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        loading: false\n      }\n    }); // todo notification\n\n    const msg = {\n      id: res.data.newPost._id,\n      text: \"Added a new post.\",\n      recipients: res.data.newPost.user.followers,\n      url: `/post/${res.data.newPost._id}`,\n      content,\n      image: media[0].url\n    };\n    dispatch(createNotify({\n      msg,\n      auth,\n      socket\n    }));\n  } catch (err) {\n    console.log(err, \"==============\");\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const getPosts = token => async dispatch => {\n  try {\n    dispatch({\n      type: POST_TYPES.LOADING_POST,\n      payload: true\n    });\n    const res = await getDataAPI(\"posts\", token);\n    dispatch({\n      type: POST_TYPES.GET_POSTS,\n      payload: { ...res.data,\n        page: 2\n      }\n    });\n    dispatch({\n      type: POST_TYPES.LOADING_POST,\n      payload: false\n    });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const updatePost = ({\n  content,\n  images,\n  auth,\n  status\n}) => async dispatch => {\n  let media = [];\n  const imgNewUrl = images.filter(img => !img.url);\n  const imgOldUrl = images.filter(img => img.url);\n\n  if (status.content === content && imgNewUrl.length === 0 && imgOldUrl.length === status.images.length) {\n    return;\n  }\n\n  try {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        loading: true\n      }\n    });\n\n    if (imgNewUrl.length > 0) {\n      media = await imageUpload(imgNewUrl);\n    }\n\n    const res = await patchDataAPI(`post/${status._id}`, {\n      content,\n      images: [...imgOldUrl, ...media]\n    }, auth.token);\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: res.data.newPost\n    });\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        success: res.data.msg\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const likePost = ({\n  post,\n  auth,\n  socket\n}) => async dispatch => {\n  const newPost = { ...post,\n    likes: [...post.likes, auth.user]\n  };\n  dispatch({\n    type: POST_TYPES.UPDATE_POST,\n    payload: newPost\n  });\n  socket.emit(\"likePost\", newPost);\n\n  try {\n    await patchDataAPI(`post/${post._id}/like`, null, auth.token); // todo notification\n\n    const msg = {\n      id: auth.user._id,\n      text: \"Liked your post.\",\n      recipients: [post.user._id],\n      url: `/post/${post._id}`,\n      content: post.content,\n      image: post.images[0].url\n    };\n    dispatch(createNotify({\n      msg,\n      auth,\n      socket\n    }));\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const unLikePost = ({\n  post,\n  auth,\n  socket\n}) => async dispatch => {\n  const newPost = { ...post,\n    likes: post.likes.filter(like => like._id !== auth.user._id)\n  };\n  dispatch({\n    type: POST_TYPES.UPDATE_POST,\n    payload: newPost\n  });\n  socket.emit(\"unLikePost\", newPost);\n\n  try {\n    await patchDataAPI(`post/${post._id}/unlike`, null, auth.token); // todo notification\n\n    const msg = {\n      id: auth.user._id,\n      text: \"Liked your post.\",\n      recipients: [post.user._id],\n      url: `/post/${post._id}`\n    };\n    dispatch(removeNotify({\n      msg,\n      auth,\n      socket\n    }));\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const getPost = ({\n  detailPost,\n  id,\n  auth\n}) => async dispatch => {\n  if (detailPost.every(post => post._id !== id)) {\n    try {\n      const res = await getDataAPI(`post/${id}`, auth.token);\n      dispatch({\n        type: POST_TYPES.GET_POST,\n        payload: res.data.post\n      });\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  }\n};\nexport const deletePost = ({\n  post,\n  auth,\n  socket\n}) => async dispatch => {\n  dispatch({\n    type: POST_TYPES.DELETE_POST,\n    payload: post\n  });\n\n  try {\n    const res = await deleteDataAPI(`post/${post._id}`, auth.token); // todo notification\n\n    const msg = {\n      id: post._id,\n      text: \"Added a new post.\",\n      recipients: res.data.newPost.user.followers,\n      url: `/post/${post._id}`\n    };\n    dispatch(removeNotify({\n      msg,\n      auth,\n      socket\n    }));\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const reportPost = ({\n  post,\n  auth\n}) => async dispatch => {\n  const reportExist = post.reports.find(report => report === auth.user._id);\n\n  if (reportExist && reportExist.length > 0) {\n    return dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: \"You have already reported this post.\"\n      }\n    });\n  }\n\n  const newPost = { ...post\n  };\n  newPost.reports.push(auth.user._id);\n  dispatch({\n    type: POST_TYPES.REPORT_POST,\n    payload: newPost\n  });\n\n  try {\n    const res = await patchDataAPI(`post/${post._id}/report`, null, auth.token);\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        success: res.data.msg\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const savePost = ({\n  post,\n  auth\n}) => async dispatch => {\n  const newUser = { ...auth.user,\n    saved: [...auth.user.saved, post._id]\n  };\n  dispatch({\n    type: GLOBALTYPES.AUTH,\n    payload: { ...auth,\n      user: newUser\n    }\n  });\n\n  try {\n    await patchDataAPI(`savePost/${post._id}`, null, auth.token);\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const unSavePost = ({\n  post,\n  auth\n}) => async dispatch => {\n  const newUser = { ...auth.user,\n    saved: auth.user.saved.filter(id => id !== post._id)\n  };\n  dispatch({\n    type: GLOBALTYPES.AUTH,\n    payload: { ...auth,\n      user: newUser\n    }\n  });\n\n  try {\n    await patchDataAPI(`unSavePost/${post._id}`, null, auth.token);\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};","map":{"version":3,"sources":["D:/MR_BHESANIYA/mern-social-media/client/src/redux/actions/postAction.js"],"names":["GLOBALTYPES","postDataAPI","getDataAPI","patchDataAPI","deleteDataAPI","imageUpload","createNotify","removeNotify","POST_TYPES","CREATE_POST","LOADING_POST","GET_POSTS","UPDATE_POST","GET_POST","DELETE_POST","REPORT_POST","SAVE_POST","createPost","content","images","auth","socket","dispatch","media","type","ALERT","payload","loading","length","res","token","data","newPost","user","msg","id","_id","text","recipients","followers","url","image","err","console","log","error","response","getPosts","page","updatePost","status","imgNewUrl","filter","img","imgOldUrl","success","likePost","post","likes","emit","unLikePost","like","getPost","detailPost","every","deletePost","reportPost","reportExist","reports","find","report","push","savePost","newUser","saved","AUTH","unSavePost"],"mappings":"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","sourcesContent":["import { GLOBALTYPES } from \"./globalTypes\";\nimport {\n\tpostDataAPI,\n\tgetDataAPI,\n\tpatchDataAPI,\n\tdeleteDataAPI,\n} from \"../../utils/fetchData\";\nimport { imageUpload } from \"../../utils/imageUpload\";\nimport { createNotify, removeNotify } from \"./notifyAction\";\n\nexport const POST_TYPES = {\n\tCREATE_POST: \"CREATE_POST\",\n\tLOADING_POST: \"LOADING_POST\",\n\tGET_POSTS: \"GET_POSTS\",\n\tUPDATE_POST: \"UPDATE_POST\",\n\tGET_POST: \"GET_POST\",\n\tDELETE_POST: \"DELETE_POST\",\n\tREPORT_POST: \"REPORT_POST\",\n\tSAVE_POST: \"SAVE_POST\",\n};\n\nexport const createPost =\n\t({ content, images, auth, socket }) =>\n\tasync (dispatch) => {\n\t\tlet media = [];\n\n\t\ttry {\n\t\t\tdispatch({ type: GLOBALTYPES.ALERT, payload: { loading: true } });\n\n\t\t\tif (images.length > 0) {\n\t\t\t\tmedia = await imageUpload(images);\n\t\t\t}\n\n\t\t\tconst res = await postDataAPI(\n\t\t\t\t\"posts\",\n\t\t\t\t{ content, images: media },\n\t\t\t\tauth.token,\n\t\t\t);\n\n\t\t\tdispatch({\n\t\t\t\ttype: POST_TYPES.CREATE_POST,\n\t\t\t\tpayload: { ...res.data.newPost, user: auth.user },\n\t\t\t});\n\n\t\t\tdispatch({ type: GLOBALTYPES.ALERT, payload: { loading: false } });\n\n\t\t\t// todo notification\n\t\t\tconst msg = {\n\t\t\t\tid: res.data.newPost._id,\n\t\t\t\ttext: \"Added a new post.\",\n\t\t\t\trecipients: res.data.newPost.user.followers,\n\t\t\t\turl: `/post/${res.data.newPost._id}`,\n\t\t\t\tcontent,\n\t\t\t\timage: media[0].url,\n\t\t\t};\n\n\t\t\tdispatch(createNotify({ msg, auth, socket }));\n\t\t} catch (err) {\n\t\t\tconsole.log(err, \"==============\");\n\t\t\tdispatch({\n\t\t\t\ttype: GLOBALTYPES.ALERT,\n\t\t\t\tpayload: {\n\t\t\t\t\terror: err.response.data.msg,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t};\n\nexport const getPosts = (token) => async (dispatch) => {\n\ttry {\n\t\tdispatch({ type: POST_TYPES.LOADING_POST, payload: true });\n\t\tconst res = await getDataAPI(\"posts\", token);\n\t\tdispatch({ type: POST_TYPES.GET_POSTS, payload: { ...res.data, page: 2 } });\n\n\t\tdispatch({ type: POST_TYPES.LOADING_POST, payload: false });\n\t} catch (err) {\n\t\tdispatch({\n\t\t\ttype: GLOBALTYPES.ALERT,\n\t\t\tpayload: {\n\t\t\t\terror: err.response.data.msg,\n\t\t\t},\n\t\t});\n\t}\n};\n\nexport const updatePost =\n\t({ content, images, auth, status }) =>\n\tasync (dispatch) => {\n\t\tlet media = [];\n\t\tconst imgNewUrl = images.filter((img) => !img.url);\n\t\tconst imgOldUrl = images.filter((img) => img.url);\n\t\tif (\n\t\t\tstatus.content === content &&\n\t\t\timgNewUrl.length === 0 &&\n\t\t\timgOldUrl.length === status.images.length\n\t\t) {\n\t\t\treturn;\n\t\t}\n\t\ttry {\n\t\t\tdispatch({ type: GLOBALTYPES.ALERT, payload: { loading: true } });\n\t\t\tif (imgNewUrl.length > 0) {\n\t\t\t\tmedia = await imageUpload(imgNewUrl);\n\t\t\t}\n\t\t\tconst res = await patchDataAPI(\n\t\t\t\t`post/${status._id}`,\n\t\t\t\t{ content, images: [...imgOldUrl, ...media] },\n\t\t\t\tauth.token,\n\t\t\t);\n\n\t\t\tdispatch({ type: POST_TYPES.UPDATE_POST, payload: res.data.newPost });\n\t\t\tdispatch({ type: GLOBALTYPES.ALERT, payload: { success: res.data.msg } });\n\t\t} catch (err) {\n\t\t\tdispatch({\n\t\t\t\ttype: GLOBALTYPES.ALERT,\n\t\t\t\tpayload: {\n\t\t\t\t\terror: err.response.data.msg,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t};\n\nexport const likePost =\n\t({ post, auth, socket }) =>\n\tasync (dispatch) => {\n\t\tconst newPost = { ...post, likes: [...post.likes, auth.user] };\n\n\t\tdispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost });\n\t\tsocket.emit(\"likePost\", newPost);\n\n\t\ttry {\n\t\t\tawait patchDataAPI(`post/${post._id}/like`, null, auth.token);\n\n\t\t\t// todo notification\n\t\t\tconst msg = {\n\t\t\t\tid: auth.user._id,\n\t\t\t\ttext: \"Liked your post.\",\n\t\t\t\trecipients: [post.user._id],\n\t\t\t\turl: `/post/${post._id}`,\n\t\t\t\tcontent: post.content,\n\t\t\t\timage: post.images[0].url,\n\t\t\t};\n\n\t\t\tdispatch(createNotify({ msg, auth, socket }));\n\t\t} catch (err) {\n\t\t\tdispatch({\n\t\t\t\ttype: GLOBALTYPES.ALERT,\n\t\t\t\tpayload: {\n\t\t\t\t\terror: err.response.data.msg,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t};\n\nexport const unLikePost =\n\t({ post, auth, socket }) =>\n\tasync (dispatch) => {\n\t\tconst newPost = {\n\t\t\t...post,\n\t\t\tlikes: post.likes.filter((like) => like._id !== auth.user._id),\n\t\t};\n\n\t\tdispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost });\n\t\tsocket.emit(\"unLikePost\", newPost);\n\n\t\ttry {\n\t\t\tawait patchDataAPI(`post/${post._id}/unlike`, null, auth.token);\n\n\t\t\t// todo notification\n\t\t\tconst msg = {\n\t\t\t\tid: auth.user._id,\n\t\t\t\ttext: \"Liked your post.\",\n\t\t\t\trecipients: [post.user._id],\n\t\t\t\turl: `/post/${post._id}`,\n\t\t\t};\n\n\t\t\tdispatch(removeNotify({ msg, auth, socket }));\n\t\t} catch (err) {\n\t\t\tdispatch({\n\t\t\t\ttype: GLOBALTYPES.ALERT,\n\t\t\t\tpayload: {\n\t\t\t\t\terror: err.response.data.msg,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t};\n\nexport const getPost =\n\t({ detailPost, id, auth }) =>\n\tasync (dispatch) => {\n\t\tif (detailPost.every((post) => post._id !== id)) {\n\t\t\ttry {\n\t\t\t\tconst res = await getDataAPI(`post/${id}`, auth.token);\n\t\t\t\tdispatch({ type: POST_TYPES.GET_POST, payload: res.data.post });\n\t\t\t} catch (err) {\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: GLOBALTYPES.ALERT,\n\t\t\t\t\tpayload: {\n\t\t\t\t\t\terror: err.response.data.msg,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t};\n\nexport const deletePost =\n\t({ post, auth, socket }) =>\n\tasync (dispatch) => {\n\t\tdispatch({ type: POST_TYPES.DELETE_POST, payload: post });\n\n\t\ttry {\n\t\t\tconst res = await deleteDataAPI(`post/${post._id}`, auth.token);\n\n\t\t\t// todo notification\n\t\t\tconst msg = {\n\t\t\t\tid: post._id,\n\t\t\t\ttext: \"Added a new post.\",\n\t\t\t\trecipients: res.data.newPost.user.followers,\n\t\t\t\turl: `/post/${post._id}`,\n\t\t\t};\n\n\t\t\tdispatch(removeNotify({ msg, auth, socket }));\n\t\t} catch (err) {\n\t\t\tdispatch({\n\t\t\t\ttype: GLOBALTYPES.ALERT,\n\t\t\t\tpayload: {\n\t\t\t\t\terror: err.response.data.msg,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t};\n\nexport const reportPost =\n\t({ post, auth }) =>\n\tasync (dispatch) => {\n\t\tconst reportExist = post.reports.find((report) => report === auth.user._id);\n\n\t\tif (reportExist && reportExist.length > 0) {\n\t\t\treturn dispatch({\n\t\t\t\ttype: GLOBALTYPES.ALERT,\n\t\t\t\tpayload: { error: \"You have already reported this post.\" },\n\t\t\t});\n\t\t}\n\t\tconst newPost = { ...post };\n\t\tnewPost.reports.push(auth.user._id);\n\n\t\tdispatch({ type: POST_TYPES.REPORT_POST, payload: newPost });\n\n\t\ttry {\n\t\t\tconst res = await patchDataAPI(\n\t\t\t\t`post/${post._id}/report`,\n\t\t\t\tnull,\n\t\t\t\tauth.token,\n\t\t\t);\n\t\t\tdispatch({ type: GLOBALTYPES.ALERT, payload: { success: res.data.msg } });\n\t\t} catch (err) {\n\t\t\tdispatch({\n\t\t\t\ttype: GLOBALTYPES.ALERT,\n\t\t\t\tpayload: {\n\t\t\t\t\terror: err.response.data.msg,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t};\n\nexport const savePost =\n\t({ post, auth }) =>\n\tasync (dispatch) => {\n\t\tconst newUser = { ...auth.user, saved: [...auth.user.saved, post._id] };\n\n\t\tdispatch({ type: GLOBALTYPES.AUTH, payload: { ...auth, user: newUser } });\n\n\t\ttry {\n\t\t\tawait patchDataAPI(`savePost/${post._id}`, null, auth.token);\n\t\t} catch (err) {\n\t\t\tdispatch({\n\t\t\t\ttype: GLOBALTYPES.ALERT,\n\t\t\t\tpayload: {\n\t\t\t\t\terror: err.response.data.msg,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t};\n\nexport const unSavePost =\n\t({ post, auth }) =>\n\tasync (dispatch) => {\n\t\tconst newUser = {\n\t\t\t...auth.user,\n\t\t\tsaved: auth.user.saved.filter((id) => id !== post._id),\n\t\t};\n\n\t\tdispatch({ type: GLOBALTYPES.AUTH, payload: { ...auth, user: newUser } });\n\n\t\ttry {\n\t\t\tawait patchDataAPI(`unSavePost/${post._id}`, null, auth.token);\n\t\t} catch (err) {\n\t\t\tdispatch({\n\t\t\t\ttype: GLOBALTYPES.ALERT,\n\t\t\t\tpayload: {\n\t\t\t\t\terror: err.response.data.msg,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t};\n"]},"metadata":{},"sourceType":"module"}