{"ast":null,"code":"import { GLOBALTYPES, DeleteData } from \"./globalTypes\";\nimport { getDataAPI, patchDataAPI } from \"../../utils/fetchData\";\nimport { imageUpload } from \"../../utils/imageUpload\";\nimport { createNotify, removeNotify } from \"./notifyAction\";\nexport const PROFILE_TYPES = {\n  LOADING: \"LOADING_PROFILE\",\n  GET_USER: \"GET_PROFILE_USER\",\n  FOLLOW: \"FOLLOW\",\n  UNFOLLOW: \"UNFOLLOW\",\n  GET_ID: \"GET_PROFILE_ID\",\n  GET_POSTS: \"GET_PROFILE_POSTS\",\n  UPDATE_POST: \"UPDATE_PROFILE_POSTS\"\n};\nexport const getProfileUsers = ({\n  id,\n  auth\n}) => async dispatch => {\n  dispatch({\n    type: PROFILE_TYPES.GET_ID,\n    payload: id\n  });\n\n  try {\n    dispatch({\n      type: PROFILE_TYPES.LOADING,\n      payload: true\n    });\n    const res = getDataAPI(`/user/${id}`, auth.token);\n    const res1 = getDataAPI(`/user_posts/${id}`, auth.token);\n    const users = await res;\n    const posts = await res1;\n    dispatch({\n      type: PROFILE_TYPES.GET_USER,\n      payload: users.data\n    });\n    dispatch({\n      type: PROFILE_TYPES.GET_POSTS,\n      payload: { ...posts.data,\n        _id: id,\n        page: 2\n      }\n    });\n    dispatch({\n      type: PROFILE_TYPES.LOADING,\n      payload: false\n    });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const updateProfileUser = ({\n  userData,\n  avatar,\n  auth\n}) => async dispatch => {\n  if (!userData.fullname) {\n    return dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: \"Please enter full name.\"\n      }\n    });\n  }\n\n  if (userData.fullname.length > 25) {\n    return dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: \"Full name is too long.\"\n      }\n    });\n  }\n\n  if (userData.story.length > 200) {\n    return dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: \"Story is too long.\"\n      }\n    });\n  }\n\n  try {\n    let media;\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        loading: true\n      }\n    });\n\n    if (avatar) {\n      media = await imageUpload([avatar]);\n    }\n\n    const res = await patchDataAPI(\"user\", { ...userData,\n      avatar: avatar ? media[0].url : auth.user.avatar\n    }, auth.token);\n    dispatch({\n      type: GLOBALTYPES.AUTH,\n      payload: { ...auth,\n        user: { ...auth.user,\n          ...userData,\n          avatar: avatar ? media[0].url : auth.user.avatar\n        }\n      }\n    });\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        success: res.data.msg\n      }\n    });\n  } catch (err) {\n    console.log(\"err===============\", err.response.data.msg);\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const follow = ({\n  users,\n  user,\n  auth,\n  socket\n}) => async dispatch => {\n  let newUser;\n\n  if (users.every(item => item._id !== user._id)) {\n    newUser = { ...user,\n      followers: [...user.followers, auth.user]\n    };\n  } else {\n    users.forEach(item => {\n      if (item._id === user._id) {\n        newUser = { ...item,\n          followers: [...item.followers, auth.user]\n        };\n      }\n    });\n  }\n\n  dispatch({\n    type: PROFILE_TYPES.FOLLOW,\n    payload: newUser\n  });\n  dispatch({\n    type: GLOBALTYPES.AUTH,\n    payload: { ...auth,\n      user: { ...auth.user,\n        following: [...auth.user.following, newUser]\n      }\n    }\n  });\n\n  try {\n    const res = await patchDataAPI(`/user/${user._id}/follow`, null, auth.token); // todo socket\n\n    socket.emit(\"follow\", res.data.newUser); // todo notification\n\n    const msg = {\n      id: auth.user._id,\n      text: \"started following you\",\n      recipients: [newUser._id],\n      url: `/profile/${auth.user._id}`\n    };\n    dispatch(createNotify({\n      msg,\n      auth,\n      socket\n    }));\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const unfollow = ({\n  users,\n  user,\n  auth,\n  socket\n}) => async dispatch => {\n  let newUser;\n\n  if (users.every(item => item._id !== user._id)) {\n    newUser = { ...user,\n      followers: DeleteData(user.followers, auth.user._id)\n    };\n  } else {\n    users.forEach(item => {\n      if (item._id === user._id) {\n        newUser = { ...item,\n          followers: DeleteData(item.followers, auth.user._id)\n        };\n      }\n    });\n  }\n\n  dispatch({\n    type: PROFILE_TYPES.UNFOLLOW,\n    payload: newUser\n  });\n  dispatch({\n    type: GLOBALTYPES.AUTH,\n    payload: { ...auth,\n      user: { ...auth.user,\n        following: DeleteData(auth.user.following, newUser._id)\n      }\n    }\n  });\n\n  try {\n    const res = await patchDataAPI(`/user/${user._id}/unfollow`, null, auth.token); // todo socket\n\n    socket.emit(\"unFollow\", res.data.newUser); // todo notification\n\n    const msg = {\n      id: auth.user._id,\n      text: \"started following you\",\n      recipients: [newUser._id],\n      url: `/profile/${auth.user._id}`\n    };\n    dispatch(removeNotify({\n      msg,\n      auth,\n      socket\n    }));\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};","map":{"version":3,"sources":["D:/MR_BHESANIYA/mern-social-media/client/src/redux/actions/profileAction.js"],"names":["GLOBALTYPES","DeleteData","getDataAPI","patchDataAPI","imageUpload","createNotify","removeNotify","PROFILE_TYPES","LOADING","GET_USER","FOLLOW","UNFOLLOW","GET_ID","GET_POSTS","UPDATE_POST","getProfileUsers","id","auth","dispatch","type","payload","res","token","res1","users","posts","data","_id","page","err","ALERT","error","response","msg","updateProfileUser","userData","avatar","fullname","length","story","media","loading","url","user","AUTH","success","console","log","follow","socket","newUser","every","item","followers","forEach","following","emit","text","recipients","unfollow"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,UAAtB,QAAwC,eAAxC;AACA,SAASC,UAAT,EAAqBC,YAArB,QAAyC,uBAAzC;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA,SAASC,YAAT,EAAuBC,YAAvB,QAA2C,gBAA3C;AAEA,OAAO,MAAMC,aAAa,GAAG;AAC5BC,EAAAA,OAAO,EAAE,iBADmB;AAE5BC,EAAAA,QAAQ,EAAE,kBAFkB;AAG5BC,EAAAA,MAAM,EAAE,QAHoB;AAI5BC,EAAAA,QAAQ,EAAE,UAJkB;AAK5BC,EAAAA,MAAM,EAAE,gBALoB;AAM5BC,EAAAA,SAAS,EAAE,mBANiB;AAO5BC,EAAAA,WAAW,EAAE;AAPe,CAAtB;AAUP,OAAO,MAAMC,eAAe,GAC3B,CAAC;AAAEC,EAAAA,EAAF;AAAMC,EAAAA;AAAN,CAAD,KACA,MAAOC,QAAP,IAAoB;AACnBA,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAEZ,aAAa,CAACK,MAAtB;AAA8BQ,IAAAA,OAAO,EAAEJ;AAAvC,GAAD,CAAR;;AAEA,MAAI;AACHE,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEZ,aAAa,CAACC,OAAtB;AAA+BY,MAAAA,OAAO,EAAE;AAAxC,KAAD,CAAR;AACA,UAAMC,GAAG,GAAGnB,UAAU,CAAE,SAAQc,EAAG,EAAb,EAAgBC,IAAI,CAACK,KAArB,CAAtB;AAEA,UAAMC,IAAI,GAAGrB,UAAU,CAAE,eAAcc,EAAG,EAAnB,EAAsBC,IAAI,CAACK,KAA3B,CAAvB;AAEA,UAAME,KAAK,GAAG,MAAMH,GAApB;AACA,UAAMI,KAAK,GAAG,MAAMF,IAApB;AAEAL,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEZ,aAAa,CAACE,QAAtB;AAAgCW,MAAAA,OAAO,EAAEI,KAAK,CAACE;AAA/C,KAAD,CAAR;AACAR,IAAAA,QAAQ,CAAC;AACRC,MAAAA,IAAI,EAAEZ,aAAa,CAACM,SADZ;AAERO,MAAAA,OAAO,EAAE,EAAE,GAAGK,KAAK,CAACC,IAAX;AAAiBC,QAAAA,GAAG,EAAEX,EAAtB;AAA0BY,QAAAA,IAAI,EAAE;AAAhC;AAFD,KAAD,CAAR;AAKAV,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEZ,aAAa,CAACC,OAAtB;AAA+BY,MAAAA,OAAO,EAAE;AAAxC,KAAD,CAAR;AACA,GAhBD,CAgBE,OAAOS,GAAP,EAAY;AACbX,IAAAA,QAAQ,CAAC;AACRC,MAAAA,IAAI,EAAEnB,WAAW,CAAC8B,KADV;AAERV,MAAAA,OAAO,EAAE;AAAEW,QAAAA,KAAK,EAAEF,GAAG,CAACG,QAAJ,CAAaN,IAAb,CAAkBO;AAA3B;AAFD,KAAD,CAAR;AAIA;AACD,CA3BK;AA6BP,OAAO,MAAMC,iBAAiB,GAC7B,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,MAAZ;AAAoBnB,EAAAA;AAApB,CAAD,KACA,MAAOC,QAAP,IAAoB;AACnB,MAAI,CAACiB,QAAQ,CAACE,QAAd,EAAwB;AACvB,WAAOnB,QAAQ,CAAC;AACfC,MAAAA,IAAI,EAAEnB,WAAW,CAAC8B,KADH;AAEfV,MAAAA,OAAO,EAAE;AAAEW,QAAAA,KAAK,EAAE;AAAT;AAFM,KAAD,CAAf;AAIA;;AAED,MAAII,QAAQ,CAACE,QAAT,CAAkBC,MAAlB,GAA2B,EAA/B,EAAmC;AAClC,WAAOpB,QAAQ,CAAC;AACfC,MAAAA,IAAI,EAAEnB,WAAW,CAAC8B,KADH;AAEfV,MAAAA,OAAO,EAAE;AAAEW,QAAAA,KAAK,EAAE;AAAT;AAFM,KAAD,CAAf;AAIA;;AAED,MAAII,QAAQ,CAACI,KAAT,CAAeD,MAAf,GAAwB,GAA5B,EAAiC;AAChC,WAAOpB,QAAQ,CAAC;AACfC,MAAAA,IAAI,EAAEnB,WAAW,CAAC8B,KADH;AAEfV,MAAAA,OAAO,EAAE;AAAEW,QAAAA,KAAK,EAAE;AAAT;AAFM,KAAD,CAAf;AAIA;;AAED,MAAI;AACH,QAAIS,KAAJ;AACAtB,IAAAA,QAAQ,CAAC;AACRC,MAAAA,IAAI,EAAEnB,WAAW,CAAC8B,KADV;AAERV,MAAAA,OAAO,EAAE;AAAEqB,QAAAA,OAAO,EAAE;AAAX;AAFD,KAAD,CAAR;;AAKA,QAAIL,MAAJ,EAAY;AACXI,MAAAA,KAAK,GAAG,MAAMpC,WAAW,CAAC,CAACgC,MAAD,CAAD,CAAzB;AACA;;AAED,UAAMf,GAAG,GAAG,MAAMlB,YAAY,CAC7B,MAD6B,EAE7B,EAAE,GAAGgC,QAAL;AAAeC,MAAAA,MAAM,EAAEA,MAAM,GAAGI,KAAK,CAAC,CAAD,CAAL,CAASE,GAAZ,GAAkBzB,IAAI,CAAC0B,IAAL,CAAUP;AAAzD,KAF6B,EAG7BnB,IAAI,CAACK,KAHwB,CAA9B;AAMAJ,IAAAA,QAAQ,CAAC;AACRC,MAAAA,IAAI,EAAEnB,WAAW,CAAC4C,IADV;AAERxB,MAAAA,OAAO,EAAE,EACR,GAAGH,IADK;AAER0B,QAAAA,IAAI,EAAE,EACL,GAAG1B,IAAI,CAAC0B,IADH;AAEL,aAAGR,QAFE;AAGLC,UAAAA,MAAM,EAAEA,MAAM,GAAGI,KAAK,CAAC,CAAD,CAAL,CAASE,GAAZ,GAAkBzB,IAAI,CAAC0B,IAAL,CAAUP;AAHrC;AAFE;AAFD,KAAD,CAAR;AAYAlB,IAAAA,QAAQ,CAAC;AACRC,MAAAA,IAAI,EAAEnB,WAAW,CAAC8B,KADV;AAERV,MAAAA,OAAO,EAAE;AAAEyB,QAAAA,OAAO,EAAExB,GAAG,CAACK,IAAJ,CAASO;AAApB;AAFD,KAAD,CAAR;AAIA,GAjCD,CAiCE,OAAOJ,GAAP,EAAY;AACbiB,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkClB,GAAG,CAACG,QAAJ,CAAaN,IAAb,CAAkBO,GAApD;AACAf,IAAAA,QAAQ,CAAC;AACRC,MAAAA,IAAI,EAAEnB,WAAW,CAAC8B,KADV;AAERV,MAAAA,OAAO,EAAE;AAAEW,QAAAA,KAAK,EAAEF,GAAG,CAACG,QAAJ,CAAaN,IAAb,CAAkBO;AAA3B;AAFD,KAAD,CAAR;AAIA;AACD,CAhEK;AAkEP,OAAO,MAAMe,MAAM,GAClB,CAAC;AAAExB,EAAAA,KAAF;AAASmB,EAAAA,IAAT;AAAe1B,EAAAA,IAAf;AAAqBgC,EAAAA;AAArB,CAAD,KACA,MAAO/B,QAAP,IAAoB;AACnB,MAAIgC,OAAJ;;AACA,MAAI1B,KAAK,CAAC2B,KAAN,CAAaC,IAAD,IAAUA,IAAI,CAACzB,GAAL,KAAagB,IAAI,CAAChB,GAAxC,CAAJ,EAAkD;AACjDuB,IAAAA,OAAO,GAAG,EAAE,GAAGP,IAAL;AAAWU,MAAAA,SAAS,EAAE,CAAC,GAAGV,IAAI,CAACU,SAAT,EAAoBpC,IAAI,CAAC0B,IAAzB;AAAtB,KAAV;AACA,GAFD,MAEO;AACNnB,IAAAA,KAAK,CAAC8B,OAAN,CAAeF,IAAD,IAAU;AACvB,UAAIA,IAAI,CAACzB,GAAL,KAAagB,IAAI,CAAChB,GAAtB,EAA2B;AAC1BuB,QAAAA,OAAO,GAAG,EAAE,GAAGE,IAAL;AAAWC,UAAAA,SAAS,EAAE,CAAC,GAAGD,IAAI,CAACC,SAAT,EAAoBpC,IAAI,CAAC0B,IAAzB;AAAtB,SAAV;AACA;AACD,KAJD;AAKA;;AAEDzB,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAEZ,aAAa,CAACG,MAAtB;AAA8BU,IAAAA,OAAO,EAAE8B;AAAvC,GAAD,CAAR;AAEAhC,EAAAA,QAAQ,CAAC;AACRC,IAAAA,IAAI,EAAEnB,WAAW,CAAC4C,IADV;AAERxB,IAAAA,OAAO,EAAE,EACR,GAAGH,IADK;AAER0B,MAAAA,IAAI,EAAE,EAAE,GAAG1B,IAAI,CAAC0B,IAAV;AAAgBY,QAAAA,SAAS,EAAE,CAAC,GAAGtC,IAAI,CAAC0B,IAAL,CAAUY,SAAd,EAAyBL,OAAzB;AAA3B;AAFE;AAFD,GAAD,CAAR;;AAQA,MAAI;AACH,UAAM7B,GAAG,GAAG,MAAMlB,YAAY,CAC5B,SAAQwC,IAAI,CAAChB,GAAI,SADW,EAE7B,IAF6B,EAG7BV,IAAI,CAACK,KAHwB,CAA9B,CADG,CAMH;;AACA2B,IAAAA,MAAM,CAACO,IAAP,CAAY,QAAZ,EAAsBnC,GAAG,CAACK,IAAJ,CAASwB,OAA/B,EAPG,CASH;;AACA,UAAMjB,GAAG,GAAG;AACXjB,MAAAA,EAAE,EAAEC,IAAI,CAAC0B,IAAL,CAAUhB,GADH;AAEX8B,MAAAA,IAAI,EAAE,uBAFK;AAGXC,MAAAA,UAAU,EAAE,CAACR,OAAO,CAACvB,GAAT,CAHD;AAIXe,MAAAA,GAAG,EAAG,YAAWzB,IAAI,CAAC0B,IAAL,CAAUhB,GAAI;AAJpB,KAAZ;AAOAT,IAAAA,QAAQ,CAACb,YAAY,CAAC;AAAE4B,MAAAA,GAAF;AAAOhB,MAAAA,IAAP;AAAagC,MAAAA;AAAb,KAAD,CAAb,CAAR;AACA,GAlBD,CAkBE,OAAOpB,GAAP,EAAY;AACbX,IAAAA,QAAQ,CAAC;AACRC,MAAAA,IAAI,EAAEnB,WAAW,CAAC8B,KADV;AAERV,MAAAA,OAAO,EAAE;AAAEW,QAAAA,KAAK,EAAEF,GAAG,CAACG,QAAJ,CAAaN,IAAb,CAAkBO;AAA3B;AAFD,KAAD,CAAR;AAIA;AACD,CAhDK;AAkDP,OAAO,MAAM0B,QAAQ,GACpB,CAAC;AAAEnC,EAAAA,KAAF;AAASmB,EAAAA,IAAT;AAAe1B,EAAAA,IAAf;AAAqBgC,EAAAA;AAArB,CAAD,KACA,MAAO/B,QAAP,IAAoB;AACnB,MAAIgC,OAAJ;;AACA,MAAI1B,KAAK,CAAC2B,KAAN,CAAaC,IAAD,IAAUA,IAAI,CAACzB,GAAL,KAAagB,IAAI,CAAChB,GAAxC,CAAJ,EAAkD;AACjDuB,IAAAA,OAAO,GAAG,EACT,GAAGP,IADM;AAETU,MAAAA,SAAS,EAAEpD,UAAU,CAAC0C,IAAI,CAACU,SAAN,EAAiBpC,IAAI,CAAC0B,IAAL,CAAUhB,GAA3B;AAFZ,KAAV;AAIA,GALD,MAKO;AACNH,IAAAA,KAAK,CAAC8B,OAAN,CAAeF,IAAD,IAAU;AACvB,UAAIA,IAAI,CAACzB,GAAL,KAAagB,IAAI,CAAChB,GAAtB,EAA2B;AAC1BuB,QAAAA,OAAO,GAAG,EACT,GAAGE,IADM;AAETC,UAAAA,SAAS,EAAEpD,UAAU,CAACmD,IAAI,CAACC,SAAN,EAAiBpC,IAAI,CAAC0B,IAAL,CAAUhB,GAA3B;AAFZ,SAAV;AAIA;AACD,KAPD;AAQA;;AAEDT,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAEZ,aAAa,CAACI,QAAtB;AAAgCS,IAAAA,OAAO,EAAE8B;AAAzC,GAAD,CAAR;AAEAhC,EAAAA,QAAQ,CAAC;AACRC,IAAAA,IAAI,EAAEnB,WAAW,CAAC4C,IADV;AAERxB,IAAAA,OAAO,EAAE,EACR,GAAGH,IADK;AAER0B,MAAAA,IAAI,EAAE,EACL,GAAG1B,IAAI,CAAC0B,IADH;AAELY,QAAAA,SAAS,EAAEtD,UAAU,CAACgB,IAAI,CAAC0B,IAAL,CAAUY,SAAX,EAAsBL,OAAO,CAACvB,GAA9B;AAFhB;AAFE;AAFD,GAAD,CAAR;;AAWA,MAAI;AACH,UAAMN,GAAG,GAAG,MAAMlB,YAAY,CAC5B,SAAQwC,IAAI,CAAChB,GAAI,WADW,EAE7B,IAF6B,EAG7BV,IAAI,CAACK,KAHwB,CAA9B,CADG,CAOH;;AACA2B,IAAAA,MAAM,CAACO,IAAP,CAAY,UAAZ,EAAwBnC,GAAG,CAACK,IAAJ,CAASwB,OAAjC,EARG,CAUH;;AACA,UAAMjB,GAAG,GAAG;AACXjB,MAAAA,EAAE,EAAEC,IAAI,CAAC0B,IAAL,CAAUhB,GADH;AAEX8B,MAAAA,IAAI,EAAE,uBAFK;AAGXC,MAAAA,UAAU,EAAE,CAACR,OAAO,CAACvB,GAAT,CAHD;AAIXe,MAAAA,GAAG,EAAG,YAAWzB,IAAI,CAAC0B,IAAL,CAAUhB,GAAI;AAJpB,KAAZ;AAOAT,IAAAA,QAAQ,CAACZ,YAAY,CAAC;AAAE2B,MAAAA,GAAF;AAAOhB,MAAAA,IAAP;AAAagC,MAAAA;AAAb,KAAD,CAAb,CAAR;AACA,GAnBD,CAmBE,OAAOpB,GAAP,EAAY;AACbX,IAAAA,QAAQ,CAAC;AACRC,MAAAA,IAAI,EAAEnB,WAAW,CAAC8B,KADV;AAERV,MAAAA,OAAO,EAAE;AAAEW,QAAAA,KAAK,EAAEF,GAAG,CAACG,QAAJ,CAAaN,IAAb,CAAkBO;AAA3B;AAFD,KAAD,CAAR;AAIA;AACD,CA1DK","sourcesContent":["import { GLOBALTYPES, DeleteData } from \"./globalTypes\";\nimport { getDataAPI, patchDataAPI } from \"../../utils/fetchData\";\nimport { imageUpload } from \"../../utils/imageUpload\";\nimport { createNotify, removeNotify } from \"./notifyAction\";\n\nexport const PROFILE_TYPES = {\n\tLOADING: \"LOADING_PROFILE\",\n\tGET_USER: \"GET_PROFILE_USER\",\n\tFOLLOW: \"FOLLOW\",\n\tUNFOLLOW: \"UNFOLLOW\",\n\tGET_ID: \"GET_PROFILE_ID\",\n\tGET_POSTS: \"GET_PROFILE_POSTS\",\n\tUPDATE_POST: \"UPDATE_PROFILE_POSTS\",\n};\n\nexport const getProfileUsers =\n\t({ id, auth }) =>\n\tasync (dispatch) => {\n\t\tdispatch({ type: PROFILE_TYPES.GET_ID, payload: id });\n\n\t\ttry {\n\t\t\tdispatch({ type: PROFILE_TYPES.LOADING, payload: true });\n\t\t\tconst res = getDataAPI(`/user/${id}`, auth.token);\n\n\t\t\tconst res1 = getDataAPI(`/user_posts/${id}`, auth.token);\n\n\t\t\tconst users = await res;\n\t\t\tconst posts = await res1;\n\n\t\t\tdispatch({ type: PROFILE_TYPES.GET_USER, payload: users.data });\n\t\t\tdispatch({\n\t\t\t\ttype: PROFILE_TYPES.GET_POSTS,\n\t\t\t\tpayload: { ...posts.data, _id: id, page: 2 },\n\t\t\t});\n\n\t\t\tdispatch({ type: PROFILE_TYPES.LOADING, payload: false });\n\t\t} catch (err) {\n\t\t\tdispatch({\n\t\t\t\ttype: GLOBALTYPES.ALERT,\n\t\t\t\tpayload: { error: err.response.data.msg },\n\t\t\t});\n\t\t}\n\t};\n\nexport const updateProfileUser =\n\t({ userData, avatar, auth }) =>\n\tasync (dispatch) => {\n\t\tif (!userData.fullname) {\n\t\t\treturn dispatch({\n\t\t\t\ttype: GLOBALTYPES.ALERT,\n\t\t\t\tpayload: { error: \"Please enter full name.\" },\n\t\t\t});\n\t\t}\n\n\t\tif (userData.fullname.length > 25) {\n\t\t\treturn dispatch({\n\t\t\t\ttype: GLOBALTYPES.ALERT,\n\t\t\t\tpayload: { error: \"Full name is too long.\" },\n\t\t\t});\n\t\t}\n\n\t\tif (userData.story.length > 200) {\n\t\t\treturn dispatch({\n\t\t\t\ttype: GLOBALTYPES.ALERT,\n\t\t\t\tpayload: { error: \"Story is too long.\" },\n\t\t\t});\n\t\t}\n\n\t\ttry {\n\t\t\tlet media;\n\t\t\tdispatch({\n\t\t\t\ttype: GLOBALTYPES.ALERT,\n\t\t\t\tpayload: { loading: true },\n\t\t\t});\n\n\t\t\tif (avatar) {\n\t\t\t\tmedia = await imageUpload([avatar]);\n\t\t\t}\n\n\t\t\tconst res = await patchDataAPI(\n\t\t\t\t\"user\",\n\t\t\t\t{ ...userData, avatar: avatar ? media[0].url : auth.user.avatar },\n\t\t\t\tauth.token,\n\t\t\t);\n\n\t\t\tdispatch({\n\t\t\t\ttype: GLOBALTYPES.AUTH,\n\t\t\t\tpayload: {\n\t\t\t\t\t...auth,\n\t\t\t\t\tuser: {\n\t\t\t\t\t\t...auth.user,\n\t\t\t\t\t\t...userData,\n\t\t\t\t\t\tavatar: avatar ? media[0].url : auth.user.avatar,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tdispatch({\n\t\t\t\ttype: GLOBALTYPES.ALERT,\n\t\t\t\tpayload: { success: res.data.msg },\n\t\t\t});\n\t\t} catch (err) {\n\t\t\tconsole.log(\"err===============\", err.response.data.msg);\n\t\t\tdispatch({\n\t\t\t\ttype: GLOBALTYPES.ALERT,\n\t\t\t\tpayload: { error: err.response.data.msg },\n\t\t\t});\n\t\t}\n\t};\n\nexport const follow =\n\t({ users, user, auth, socket }) =>\n\tasync (dispatch) => {\n\t\tlet newUser;\n\t\tif (users.every((item) => item._id !== user._id)) {\n\t\t\tnewUser = { ...user, followers: [...user.followers, auth.user] };\n\t\t} else {\n\t\t\tusers.forEach((item) => {\n\t\t\t\tif (item._id === user._id) {\n\t\t\t\t\tnewUser = { ...item, followers: [...item.followers, auth.user] };\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tdispatch({ type: PROFILE_TYPES.FOLLOW, payload: newUser });\n\n\t\tdispatch({\n\t\t\ttype: GLOBALTYPES.AUTH,\n\t\t\tpayload: {\n\t\t\t\t...auth,\n\t\t\t\tuser: { ...auth.user, following: [...auth.user.following, newUser] },\n\t\t\t},\n\t\t});\n\n\t\ttry {\n\t\t\tconst res = await patchDataAPI(\n\t\t\t\t`/user/${user._id}/follow`,\n\t\t\t\tnull,\n\t\t\t\tauth.token,\n\t\t\t);\n\t\t\t// todo socket\n\t\t\tsocket.emit(\"follow\", res.data.newUser);\n\n\t\t\t// todo notification\n\t\t\tconst msg = {\n\t\t\t\tid: auth.user._id,\n\t\t\t\ttext: \"started following you\",\n\t\t\t\trecipients: [newUser._id],\n\t\t\t\turl: `/profile/${auth.user._id}`,\n\t\t\t};\n\n\t\t\tdispatch(createNotify({ msg, auth, socket }));\n\t\t} catch (err) {\n\t\t\tdispatch({\n\t\t\t\ttype: GLOBALTYPES.ALERT,\n\t\t\t\tpayload: { error: err.response.data.msg },\n\t\t\t});\n\t\t}\n\t};\n\nexport const unfollow =\n\t({ users, user, auth, socket }) =>\n\tasync (dispatch) => {\n\t\tlet newUser;\n\t\tif (users.every((item) => item._id !== user._id)) {\n\t\t\tnewUser = {\n\t\t\t\t...user,\n\t\t\t\tfollowers: DeleteData(user.followers, auth.user._id),\n\t\t\t};\n\t\t} else {\n\t\t\tusers.forEach((item) => {\n\t\t\t\tif (item._id === user._id) {\n\t\t\t\t\tnewUser = {\n\t\t\t\t\t\t...item,\n\t\t\t\t\t\tfollowers: DeleteData(item.followers, auth.user._id),\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tdispatch({ type: PROFILE_TYPES.UNFOLLOW, payload: newUser });\n\n\t\tdispatch({\n\t\t\ttype: GLOBALTYPES.AUTH,\n\t\t\tpayload: {\n\t\t\t\t...auth,\n\t\t\t\tuser: {\n\t\t\t\t\t...auth.user,\n\t\t\t\t\tfollowing: DeleteData(auth.user.following, newUser._id),\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\n\t\ttry {\n\t\t\tconst res = await patchDataAPI(\n\t\t\t\t`/user/${user._id}/unfollow`,\n\t\t\t\tnull,\n\t\t\t\tauth.token,\n\t\t\t);\n\n\t\t\t// todo socket\n\t\t\tsocket.emit(\"unFollow\", res.data.newUser);\n\n\t\t\t// todo notification\n\t\t\tconst msg = {\n\t\t\t\tid: auth.user._id,\n\t\t\t\ttext: \"started following you\",\n\t\t\t\trecipients: [newUser._id],\n\t\t\t\turl: `/profile/${auth.user._id}`,\n\t\t\t};\n\n\t\t\tdispatch(removeNotify({ msg, auth, socket }));\n\t\t} catch (err) {\n\t\t\tdispatch({\n\t\t\t\ttype: GLOBALTYPES.ALERT,\n\t\t\t\tpayload: { error: err.response.data.msg },\n\t\t\t});\n\t\t}\n\t};\n"]},"metadata":{},"sourceType":"module"}